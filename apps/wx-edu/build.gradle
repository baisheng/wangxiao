import org.apache.tools.ant.filters.ReplaceTokens

apply plugin: 'war'
apply from: 'provided.gradle'
//apply from: 'https://raw.github.com/akhikhl/gretty/master/pluginScripts/gretty.plugin'

//buildscript {
//    repositories {
//        jcenter()
//    }
//
//    dependencies {
//        classpath 'com.bmuschko:gradle-cargo-plugin:2.2.1'
//    }
//}
//
//apply plugin: "com.bmuschko.cargo"
//apply plugin: 'com.bmuschko.cargo-base'
buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.akhikhl.gretty:gretty:1.2.4"
    }
}

apply plugin: "org.akhikhl.gretty"
dependencies {
    compile(
            project(':modules:wx-commons'),
    )
    ext.jarTree = fileTree(dir: 'libs', include: '**/*.jar')
    ext.rootProjectLibs = new File(rootProject.rootDir, 'libs').getAbsolutePath()
    ext.jarTree += fileTree(dir: rootProjectLibs, include: '**/*.jar')

    compile jarTree

    provided libraries.'servlet-api'
    provided libraries.'jsp-api'

    compile(
            libraries.'aspectjrt',
            libraries.'aspectjweaver',
//            libraries.'spring-tx',
            libraries.'spring-orm',
            libraries.'spring-jdbc',
            libraries.'spring-jms',
            libraries.'spring-test',
            libraries.'mybatis',
            libraries.'mybatis-spring',
//            libraries.'ibatis-core',
            libraries.'druid',
            libraries.'mail',
            libraries.'mysql',
            libraries.'spymemcached',
            libraries.'commons-fileupload',
            libraries.'aopalliance',
            libraries.'commons-lang',
            libraries.'commons-io',
            libraries.'commons-net',
            libraries.'commons-httpclient',
            libraries.'commons-codec',
            libraries.'commons-validator',
            libraries.'commons-beanutils',
            libraries.'commons-digester',
            libraries.'commons-collections',
            libraries.'commons-logging',
            libraries.'commons-configuration',
            libraries.'guava',
            libraries.'dom4j',
            libraries.'urlrewritefilter',
            libraries.'ezmorph',
            libraries.'jrobin',
            libraries.'json-lib',
            libraries.'ant',
            libraries.'beetl',
            libraries.'btjson',
            libraries.'sitemesh',
            libraries.'quartz',
            libraries.'htmlcompressor',
            libraries.'yuicompressor',
            libraries.'hessian',
            libraries.'ognl',
//            libraries.'gson',
            libraries.'velocity',
            libraries.'velocity-tools',
            libraries.'urlrewritefilter',
            libraries.'jrobin',
            libraries.'json-lib',
            libraries.'ehcache-core',
            libraries.'commons-net',
            libraries.'UserAgentUtils',
            libraries.'javamelody-core',
            libraries.'jackson',
            libraries.'jackson-annotations',
            libraries.'jackson-databind',
            libraries.'lombok',
            libraries.'jstl-api',
            libraries.'jstl'

    )

//    compile group: 'com.github.sd4324530', name: 'fastweixin', version: '1.3.9'

}

//cargo {
//    containerId = 'tomcat8x'
//    port = 10080 //服务器tomcat端口号

//    deployable {
//        context = '/'
//    }
//}



//task deploy(type: com.bmuschko.gradle.cargo.tasks.remote.CargoRedeployRemote) {
//    dependsOn clean, war

//    hostname = "ihoubo.cn"//服务器地址
//    hostname = "ihoubo.com"//服务器地址
//    username = "admin" //来源于tomcat-users.xml
//    password = "abcd1234"
//    logger.lifecycle("CargoDeployRemote war package!")
//}

// File: build.gradle
loadConfiguration()

task printProps << {
    println "serverName:  $config.jdbc.url"
    println "mail.server: $config.jdbc.user"
    println "mail.port:   $config.jdbc.password"
}

def loadConfiguration() {
    def environment = hasProperty('env') ? env : 'dev'
    project.ext.envrionment = environment
    println "Environment is set to $environment"

    def configFile = file('environment.groovy')
    def config = new ConfigSlurper("$environment").parse(configFile.toURL())
    project.ext.config = config
    config.toProperties()
}


processResources {
    from(sourceSets.main.resources.srcDirs) {
        filter(ReplaceTokens,
                tokens: loadConfiguration()
        )
    }
}

gretty {
    port = 9090
    // ...
    servletContainer = 'tomcat8'
    contextPath ='/'
//    realm 'auth'
//    realmConfigFile 'tomcat-realm.properties'
    // ...
}