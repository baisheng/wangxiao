buildscript {
    repositories {
        maven { url "http://maven.oschina.net/content/groups/public/" }
        maven { url 'http://repo.spring.io/plugins-release' }
        jcenter()
    }

    dependencies {
        classpath(
                "org.springframework.boot:spring-boot-gradle-plugin:1.3.1.RELEASE",
                classpath('se.transmode.gradle:gradle-docker:1.2')
        )
    }
}
version = 'latest'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'docker'
jar {
    baseName = 'edu-api'
}
// This is used as the docker image prefix (org)
group = 'dora.how:5000/bluepx'
def registryUrl = 'dora.how:5000'


//docker {
//    url = 'unix:///var/run/docker.sock'
//    registryCredentials {
//        url = 'http://' + registryUrl + '/v2'
//    }
//}
docker {
//    useApi true
//    hostUrl 'http://dora.how:5000'
    registry registryUrl
//    apiUsername 'user'
//    apiPassword 'password'
//    apiEmail 'me@mycompany.com'
}
// tag::task[]

task buildDocker(type: Docker, dependsOn: build) {
    push = true
    applicationName = jar.baseName
    dockerfile = file('src/main/docker/Dockerfile')
    doFirst {
        copy {
            from jar
            into stageDir
        }
    }
}


configurations {
    provided.all*.exclude group: 'javax.servlet'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
//    testCompile("org.springframework.boot:spring-boot-starter-test")
//    <dependency>
//    <groupId>org.springframework.boot</groupId>
//			<artifactId>spring-boot-starter-web</artifactId>
//    </dependency>
//		<dependency>
//			<groupId>org.springframework.boot</groupId>
//    <artifactId>spring-boot-starter-security</artifactId>
//		</dependency>
//    <dependency>
//    <groupId>org.springframework.security.oauth</groupId>
//			<artifactId>spring-security-oauth2</artifactId>
//    </dependency>
//		<dependency>
//			<groupId>org.springframework.security</groupId>
//    <artifactId>spring-security-jwt</artifactId>
//			<optional>true</optional>
//    </dependency>
//		<dependency>
//			<groupId>org.springframework.boot</groupId>
//    <artifactId>spring-boot-starter-test</artifactId>
//			<scope>test</scope>
//    </dependency>

    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.springframework.boot:spring-boot-starter-jdbc")
    compile("org.springframework.boot:spring-boot-starter-security")
    compile("org.springframework.security.oauth:spring-security-oauth2")
    compile("org.springframework.security:spring-security-jwt")
    testCompile("org.springframework.boot:spring-boot-starter-test")

    compile("com.zaxxer:HikariCP:2.4.3")
    compile("io.jsonwebtoken:jjwt:0.6.0")

    compile(
//            libraries.'aspectjrt',
//            libraries.'aspectjweaver',
//            libraries.'spring-tx',
//            libraries.'spring-orm',
//            libraries.'spring-jdbc',
//            libraries.'spring-jms',
//            libraries.'spring-boot',
            libraries.'swagger',
            libraries.'swagger-ui',
//            libraries.'mybatis',
//            libraries.'mybatis-spring',
//            libraries.'ibatis-core',
            libraries.'druid',
//            libraries.'mail',
            libraries.'mysql',
            libraries.'spymemcached',
            libraries.'commons-fileupload',
            libraries.'aopalliance',
            libraries.'commons-lang',
            libraries.'commons-io',
            libraries.'commons-net',
            libraries.'commons-httpclient',
            libraries.'commons-codec',
            libraries.'commons-validator',
            libraries.'commons-beanutils',
            libraries.'commons-digester',
            libraries.'commons-collections',
            libraries.'commons-logging',
            libraries.'commons-configuration',
            libraries.'guava',
            libraries.'dom4j',
            libraries.'urlrewritefilter',
            libraries.'ezmorph',
            libraries.'jrobin',
            libraries.'json-lib',
            libraries.'ant',
            libraries.'sitemesh',
            libraries.'quartz',
            libraries.'htmlcompressor',
            libraries.'yuicompressor',
            libraries.'hessian',
            libraries.'ognl',
            libraries.'gson',
            libraries.'velocity',
            libraries.'velocity-tools',
            libraries.'urlrewritefilter',
            libraries.'jrobin',
            libraries.'json-lib',
            libraries.'ehcache-core',
            libraries.'commons-net',
            libraries.'UserAgentUtils',
            libraries.'javamelody-core',
            libraries.'jackson',
            libraries.'jackson-annotations',
            libraries.'jackson-databind',
            libraries.'lombok',
            libraries.'cors-filter'
//            libraries.'jstl-api',
//            libraries.'jstl'

    )
}
