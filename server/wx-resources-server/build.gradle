buildscript {
    repositories {
        mavenCentral()
        maven { url 'http://repo.spring.io/plugins-release' }
        jcenter()
    }

    dependencies {
        classpath(
                "org.springframework.boot:spring-boot-gradle-plugin:1.3.1.RELEASE",
                "se.transmode.gradle:gradle-docker:1.2",
//                'org.springframework:springloaded:1.2.0.RELEASE'
        )
    }
}
version = 'latest'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'docker'

//idea {
//    module {
//        inheritOutputDirs = false
//        outputDir = file("$buildDir/classes/main/")
//    }
//}
jar {
    baseName = 'wx-auth-server'
}
// This is used as the docker image prefix (org)
group = 'dora.how:5000/bluepx'
def registryUrl = 'dora.how:5000'

docker {
    registry registryUrl
}

task buildDocker(type: Docker, dependsOn: build) {
    push = true
    applicationName = jar.baseName
    dockerfile = file('src/main/docker/Dockerfile')
    doFirst {
        copy {
            from jar
            into stageDir
        }
    }
}

//configurations {
//    dev
//}

dependencies {
    compile(
            project(':server:wx-jwt-config'),

    )
    /// Modules
    compile(
            project(':modules:wx-course'),
            project(':modules:wx-site')

    )
    compile("org.springframework.boot:spring-boot-starter-web")
//    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.springframework.boot:spring-boot-starter-jdbc")
    compile("org.springframework.boot:spring-boot-starter-security")
    compile("org.springframework.security.oauth:spring-security-oauth2")
    compile("org.springframework.security:spring-security-jwt")
//    compile("org.springframework.boot:spring-boot-devtools")
//    dev("org.springframework.boot:spring-boot-devtools")
    testCompile("org.springframework.boot:spring-boot-starter-test")

    compile("com.github.ulisesbocchio:spring-boot-jar-resources:1.0")
    compile(
            libraries.'swagger',
            libraries.'swagger-ui',

            libraries.'beetl',
            libraries.'beetlsql',
            libraries.'btjson',
            libraries.'sitemesh',
            libraries.'commons-lang3',
            libraries.'druid',
            libraries.'mysql',
//            libraries.'cors-filter',

    )

//    bootRun {
//        addResources = true
//    }

//    bootRun {
//         Use Spring Boot DevTool only when we run Gradle bootRun task
//        classpath = sourceSets.main.runtimeClasspath + configurations.dev
//    }
}
